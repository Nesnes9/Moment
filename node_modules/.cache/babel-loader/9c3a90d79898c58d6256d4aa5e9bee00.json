{"ast":null,"code":"var _jsxFileName = \"/Users/nesrine/Downloads/films-master/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport FilmsCollection from './FilmsCollection';\nimport Filtering from './Filtering';\nimport { API_URI } from \"./constants\";\nimport Paging from \"./Paging\";\nimport _ from 'lodash';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchAll = () => {\n      fetch(\"\".concat(API_URI, \"/all\"), {}).then(res => res.json()).then(data => this.setState({\n        data,\n        filters: _.uniq(_.map(data, film => film.category))\n      }));\n    };\n\n    this.changePerPage = event => {\n      this.setState({\n        perPage: parseInt(event.target.value),\n        currentPage: 1\n      });\n    };\n\n    this.handleGenre = filters => this.setState({\n      filters,\n      currentPage: 1\n    });\n\n    this.changeCurrentPage = currentPage => this.setState({\n      currentPage\n    });\n\n    this.deleteOne = id => {\n      fetch(\"\".concat(API_URI, \"/\").concat(id), {\n        method: 'delete'\n      }).then(this.fetchAll).catch(error => console.log('ERROR', error));\n    };\n\n    this.vote = (id, vote) => {\n      fetch(\"\".concat(API_URI, \"/\").concat(id, \"/\").concat(vote), {\n        method: 'put'\n      }).then(this.fetchAll).catch(error => console.log('ERROR', error));\n    };\n\n    this.state = {\n      perPage: 4,\n      currentPage: 1,\n      filters: [],\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchAll();\n  }\n\n  render() {\n    const _this$state = this.state,\n          perPage = _this$state.perPage,\n          currentPage = _this$state.currentPage,\n          data = _this$state.data,\n          filters = _this$state.filters;\n    const dataToShow = getDataToShow(data, currentPage, perPage, filters);\n    let pageCount = data.length / perPage + 1;\n    if (data.length % perPage === 0) pageCount--;\n    pageCount = Math.floor(pageCount);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Filtering, {\n      allGenres: _.uniq(_.map(data, film => film.category)),\n      handleGenre: this.handleGenre,\n      perPage: perPage,\n      changePerPage: this.changePerPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Paging, {\n      changeCurrentPage: this.changeCurrentPage,\n      pageCount: pageCount,\n      selectedPage: currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), \" \", React.createElement(FilmsCollection, {\n      vote: this.vote,\n      deleteOne: this.deleteOne,\n      data: dataToShow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Paging, {\n      changeCurrentPage: this.changeCurrentPage,\n      pageCount: pageCount,\n      selectedPage: currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), \" \");\n  }\n\n}\n\nconst getDataToShow = (rawData, page, perPage, filters) => {\n  const startIndex = (page - 1) * perPage; // First, filter\n\n  const filteredData = _.filter(rawData, ({\n    category\n  }) => _.includes(filters, category)); // Next, get only what you need to show based on the paging\n\n\n  return _.slice(filteredData, startIndex, startIndex + perPage);\n};","map":{"version":3,"sources":["/Users/nesrine/Downloads/films-master/src/App.js"],"names":["React","Component","FilmsCollection","Filtering","API_URI","Paging","_","App","constructor","props","fetchAll","fetch","then","res","json","data","setState","filters","uniq","map","film","category","changePerPage","event","perPage","parseInt","target","value","currentPage","handleGenre","changeCurrentPage","deleteOne","id","method","catch","error","console","log","vote","state","componentDidMount","render","dataToShow","getDataToShow","pageCount","length","Math","floor","rawData","page","startIndex","filteredData","filter","includes","slice"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css'\nimport FilmsCollection from './FilmsCollection'\nimport Filtering from './Filtering'\nimport {API_URI} from \"./constants\";\nimport Paging from \"./Paging\";\nimport _ from 'lodash'\n\nexport default class App extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            perPage: 4,\n            currentPage: 1,\n            filters: [],\n            data: []\n        }\n    }\n\n    fetchAll = () => {\n        fetch(`${API_URI}/all`, {})\n            .then(res => res.json())\n            .then(data => this.setState({data, filters: _.uniq(_.map(data, film => film.category))}))\n    }\n\n    componentDidMount() {\n        this.fetchAll()\n    }\n\n    changePerPage = event => {\n        this.setState({perPage: parseInt(event.target.value), currentPage: 1,})\n    }\n\n    handleGenre = filters => this.setState({ filters, currentPage: 1 })\n\n    changeCurrentPage = currentPage => this.setState({currentPage})\n\n    deleteOne = id => {\n        fetch(`${API_URI}/${id}`, {method: 'delete'})\n            .then(this.fetchAll)\n            .catch(error => console.log('ERROR', error))\n    }\n\n    vote = (id, vote) => {\n        fetch(`${API_URI}/${id}/${vote}`, {method: 'put'})\n            .then(this.fetchAll)\n            .catch(error => console.log('ERROR', error))\n    }\n\n    render() {\n        const {perPage, currentPage, data, filters} = this.state\n        const dataToShow = getDataToShow(data, currentPage, perPage, filters)\n\n        let pageCount = data.length / perPage + 1\n        if (data.length % perPage === 0) pageCount--\n        pageCount = Math.floor(pageCount)\n\n        return (\n            <div className=\"App\">\n                <Filtering allGenres={_.uniq(_.map(data, film => film.category))} handleGenre={this.handleGenre} perPage={perPage} changePerPage={this.changePerPage}/>\n                <Paging changeCurrentPage={this.changeCurrentPage}  pageCount={pageCount} selectedPage={currentPage}/> {/*TODO: resolve the bug when length % perPage != 0 */}\n                <FilmsCollection vote={this.vote} deleteOne={this.deleteOne} data={dataToShow}/>\n                <Paging changeCurrentPage={this.changeCurrentPage}  pageCount={pageCount} selectedPage={currentPage}/> {/*TODO: resolve the bug when length % perPage != 0 */}\n            </div>\n        )\n    }\n\n}\n\nconst getDataToShow = (rawData, page, perPage, filters) => {\n    const startIndex = (page - 1) * perPage\n\n    // First, filter\n    const filteredData = _.filter(rawData, ({category}) => _.includes(filters, category))\n\n    // Next, get only what you need to show based on the paging\n    return _.slice(filteredData, startIndex, startIndex + perPage)\n}\n"]},"metadata":{},"sourceType":"module"}